# RegexFilter config
######################

# prefix to show in front of the few command responses RegexFilter has
prefix: "RegexFilter: "

# debug mode, log every matching pattern and fired filter action in console
debug: false

# these are the filters that gets applied to every chat message submitted by players
#     a pretty good introductory material on RegEx can be found on https://www.regular-expressions.info/
#     for an exhaustive documentation, see https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html
filters:
# Filters are evaluated in their order of appearance in the config.
# Each of them is structured as follows, they MAY have one of each attribute;
# the attributes may appear in any order, but are evaluated in the following:
#  - include:      "relative path"      - another file containing other patterns, in an identical format (up to and including 'filters:'
#                                         NB: if it is present, none other attributes are evaluated
#                                         NB: I do not check for recursion depth, if you do point two of these against each other's files, the server WILL throw the plugin out
#    pattern:      "regex pattern"      - the pattern the filter matches against the user messages (without slashes)
#                                         NB: unless you have one, your filter WILL be ignored
#                                         NB: it is case sensitive, use the flag expression (?i) to make a filter case-ignorant
#                                         NB: in case of non-ASCII text, use (?iu) instead - it's not enabled by default as it's somewhat slower
#    exempt-group: "permission-name"    - leaf node under regexfilter.exempt, the filter will be skipped for players with this permission
#                                         NB: this means side effects as well
#    notify-group: "permission-name"    - leaf node under regexfilter.notify, players with this permission will get notified if a message matches the filter
#    notify-text:  "notice message"     - message to be sent to the notified player
#    warn-text:    "reply message"      - message to be sent back to the player
#    exec:         "command"            - the command to be executed without leading '/'
#    deny:         boolean              - if true, the player's message will not be transmitted NB: THIS SKIPS ANY FURTHER FILTERS
#    replace:      "replacement"        - the replacement text. You can use matched groups with $<number> (\<number> does not seem to work)
#
# In the case of notify-text, warn-text, exec and replace, you can use PAPI placeholders with %placeholder%, as well as
#     the following internal placeholders:
#       - {PATTERN} - contains the regex pattern, mostly used for debug purposes
#       - {MATCH}   - contains the FIRST matching string
#       - {MESSAGE} - contains the whole original message
# Color/formatting codes SHOULD start with '§' in all cases; don't forget that color overrides formatting, so it should come first.
# Apart from the regular formatting codes, you can now use '§p' to restore the text formatting as it were before the replacement
# NB: this does not take the 'base' text color into account as it is usually handled by a chat plugin at a later stage

  - pattern: "^\\./" # you have to escape . as it would match any character
    replace: "/"
    # show commands to players without thinking

  - pattern: "(?i)(nigger|nigga|n1gg3r|nagger|ni@@er|rape|rapist|faggot|fag\\b|faggit|fa@@ot)"
    exec: "warn %player_name% Auto-detected: Prohibited language"
    deny: true

  - pattern: "(\w)\1{3,}"
    replace: "$1$1$1"

# Now let's demonstrate features with some clbuttical examples
  #- pattern:      "fuck"
  #  exec:         "kick %player_name% No, he's talking about {MATCH}. You can't say {MATCH} in school, you {MATCH}ing fatass!"
  #  deny:         true

  #- pattern:      "(?i)(?:shit|piss|cunt|cocksucker|(?:mother)?fuck(?:er)?|tits)"
  #  exempt-group: "carlin"
  #  warn-text:    "§c50 years ago they'd have sued you for this"
  #  deny:         true
    # for any of those very nasty words (case insensitve), you get a threatening message and your original message
    # gets blocked, unless, of course, you're George Carlin.
    # however, the word 'fuck' would already have triggered the previous filter and got the message denied, so that won't reach this one.
    # As the pattern is not flanked by '\b'-s on either side, this filter leads to the Scunthorpe problem.
    # Also notice that if you were to write 'ginger cunthair', the next filter would be masked out by the deny directive

  #- pattern:      "(?i)\\bging(er|a)\\b"
  #  exempt-group: "minchin"
  #  notify-group: "gwa"
  #  notify-text:  "%player_name% just called someone a {MATCH}"
  #  replace:      "Zingiber officinale"
    # in this case, we only match the whole word so no chance for buttbuttins
    # notice that you have to double-escape \b
    # the offending word gets replaced and both the GWA and you get a warning about the incident, with your exact words used

    # *Sigh* I'm running out of comedians so let's have some actually useful filters
  #- pattern:      "^,b"
  #  notify-group: "moderators"
  #  notify-text:  "§c%player_name% is most likely using Baritone"
    # let this through apparently unnoticed, your staff will know what to look for though

  #- pattern:      "^>(.*)"
  #  exempt-group: "newfriends"
  #  replace:      "§2>$1"
    # greentext
    # this time, we used the 1st matching group for demonstration,
    # but this could also be simplified as "^>" -> "§2>"

  #- pattern:      "(?i)(?<=^|\\s+):format:(?=\\s+|$)"
    # NB: \b does not work here, as ":" is not considered a word character
    #     use the above workaround when matching (emoji) shortcodes
  #  warn-text:    |-  # you can of course use multi-line YAML as well

  #    §0#§r0 §1#§r1 §2#§r2 §3#§r3
  #    §8#§r8 §9#§r9 §a#§ra §b#§rb
  #    §4#§r4 §5#§r5 §6#§r6 §7#§r7
  #    §c#§rc §d#§rd §e#§re §f#§rf
  #    §k#§rk §l#§rl §m#§rm §n#§rn §o#§ro #r
  #  deny:         true

    # test cases below, but stick around as you may learn some tricks
    # CHECK EXEMPT & WARN & DENY
  #- pattern:      "^exempt$"
  #  exempt-group: "test" # only warn players lacking regexfilter.exempt.test
  #  warn-text:    "you are not exempt"
  #  deny: true

    # CHECK COLOR REPLACEMENT
  #- pattern:      "(?i)(?<=^|\\s+):rbw:(?=\\s+|$)"
  #  replace:      "§4|§c|§6|§e|§a|§2|§3|§b|§1|§9|§d|§5|§f"

    # CHECK COLOR MATCHING
  #- pattern:      "§k" # it's always § in matches
  #  exempt-group: "obfuscators"
  #  replace:      ""

    # CHECK INTERNAL PLACEHOLDERS
  #- pattern:      "\\btest\\b"
  #  notify-text:  "{MATCH} HAS BEEN SAID"
  #  notify-group: "test"
  #  warn-text:    "/{PATTERN}/ MATCHED"
  #  exec:         "say {MESSAGE}"
  #  replace:      "%player_name% tested placeholders with message {MESSAGE}"
